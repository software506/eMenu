<style lang="scss" rel="stylesheet/scss">
  @import '../../assets/scss/index.scss';
  .customer-page {
    padding-top: $xg-nav-height;
    padding-bottom: 100rpx;
    .page-content {
      .goods-part {
        padding-left: 30rpx;
        background-color: #fff;
        .content {
          padding-right: 30rpx;
          @include flex-x-middle();
          image {
            width: 146rpx;
            height: 146rpx;
            margin: 24rpx 0;
          }
          .goods-info {
            margin-left: 20rpx;
            height: 100%;
            @include flex(1);
            @include flex-y-center();
            .name {
              @include ellipsis();
              margin-bottom: 10rpx;
              font-size: $xg-size-4;
            }
            .dim {
              @include ellipsis(2);
              font-size: $xg-size-2;
              color: #999;
            }
            .price {
              font-size: $xg-size-5;
              margin-top: 10rpx;
              color: $xg-c-red;
            }
          }
          .count {
            font-size: $xg-size-4;
            color: #333;
          }
        }
      }
      .customer-type {
        height: 88rpx;
        background-color: #fff;
        margin-top: 20rpx;
        border-bottom: 1px solid $xg-c-seg;
        @include flex-center();
        text {
          width: 108rpx;
          height: 44rpx;
          line-height: 44rpx;
          color: #a1a1a1;
          border: 1px solid #a1a1a1;
          text-align: center;
          font-size: $xg-size-2;
          &.active {
            background-color: $xg-c-red;
            color: #fff;
            border: 1px solid $xg-c-red;
          }
          &:first-of-type {
            border-radius: 44rpx 0 0 44rpx;
          }
          &:nth-of-type(2) {
            border-width: 1px 0 1px 0;
          }
          &:last-of-type {
            border-radius: 0 44rpx 44rpx 0;
          }
        }
      }
      .details-part {
        padding: 10rpx 30rpx;
        border-bottom: 1px solid $xg-c-seg;
        background-color: #fff;
        .item {
          height: 60rpx;
          @include flex-x-middle();
          @include flex-justify-content_space-between();
          color: #333;
          .item-title {
            color: #666;
          }
        }
      }
      .address-part {
        background-color: #fff;
        color: #666;
        .section {
          @include flex-x-middle();
          @include flex-justify-content_space-between();
          height: 60rpx;
          padding: 0 30rpx;
          input {
            @include flex(1);
            font-size: $xg-size-4;
            text-align: right;
            color: #333;
            &::-webkit-input-placeholder {
              font-size: $xg-size-4;
              color: $c-999;
            }
            &:-moz-placeholder {
              font-size: $xg-size-4;
              color: $c-999;
            }
            &::-moz-placeholder {
              font-size: $xg-size-4;;
              color: $c-999;
            }
            &:-ms-input-placeholder {
              font-size: $xg-size-4;
              color: $c-999;
            }
          }
          .placeholder {
            font-size: $xg-size-4;
            color: $c-999;
          }
          .area {
            color: #333;
          }
          &.address-street {
            padding: 20rpx 30rpx;
            height: auto;
            .item-title {
              align-self: flex-start;
            }
            textarea {
              @include flex(1);
              resize: none;
              border: 0;
              text-align: right;
              font-size: $xg-size-4;
              color: #333;
              &::-webkit-input-placeholder {
                font-size: $xg-size-4;
                color: $c-999;
              }
              &:-moz-placeholder {
                font-size: $xg-size-4;
                color: $c-999;
              }
              &::-moz-placeholder {
                font-size: $xg-size-4;
                color: $c-999;
              }
              &:-ms-input-placeholder {
                font-size: $xg-size-4;
                color: $c-999;
              }
            }
          }
          &.set-default {
            @include flex-justify-content_space-between();
            image {
              width: 34rpx;
              height: 34rpx;
            }
          }
        }
      }
      .describe-part {
        background-color: #fff;
        .package-section {
          height: 60rpx;
          @include flex-x-middle();
          @include flex-justify-content_space-between();
          color: #333;
          .item-title {
            color: #666;
          }
        }
        .remark-section {
          @include flex-x-middle();
          padding: 0 30rpx;
          color: #666;
          .item-title {
            align-self: flex-start;
          }
          textarea {
            @include flex(1);
            resize: none;
            height: 100%;
            border: 0;
            font-size: $xg-size-4;
            color: #333;
            padding-left: 30rpx;
            &::-webkit-input-placeholder {
              font-size: $xg-size-4;
              color: $c-999;
            }
            &:-moz-placeholder {
              font-size: $xg-size-4;
              color: $c-999;
            }
            &::-moz-placeholder {
              font-size: $xg-size-4;;
              color: $c-999;
            }
            &:-ms-input-placeholder {
              font-size: $xg-size-4;
              color: $c-999;
            }
          }
        }
        .pic-section {
          padding: 20rpx 30rpx;
          @include flex-x();
          .new-file-input {
            width: 140rpx;
            height: 140rpx;
            border: 1px dashed #a1a1a1;
            padding: 0 20rpx;
            @include flex-y-middle();
            @include justify-content-center();
            @include flex(none);
            text {
              color: #a1a1a1;
              font-size: $xg-size-2;
              margin-top: 10rpx;
            }
            image {
              width: 40rpx;
            }
          }
          .img-box {
            padding-left: 30rpx;
            @include flex-x();
            flex-wrap: wrap;
            .img-wrapper {
              width: 173rpx;
              height: 173rpx;
              padding: 10rpx;
              overflow: hidden;
              position: relative;
              @include flex-center();
              image {
                width: 100%;
              }
              text {
                position: absolute;
                right: 20rpx;
                top: 20rpx;
                display: block;
                width: 30rpx;
                height: 30rpx;
                line-height: 30rpx;
                text-align: center;
                color: #333;
                background-color: rgba(255, 255, 255, 0.6);
              }
            }
          }
        }
      }
      .footer-part {
        margin-top: 20rpx;
        height: 100rpx;
        background-color: #fff;
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        @include flex-center();
        button {
          width: 240rpx;
          height: 70rpx;
          border-radius: 70rpx;
          background-color: #f1f1f1;
          color: #999;
          font-size: $xg-size-4;
          &.active {
            background-color: $xg-c-red;
            color: #fff;
          }
        }
      }
    }
    .popup {
      position: fixed;
      left: 0;
      top: 0;
      width: 100%;
      height: 100vh;
      background-color: rgba(0, 0, 0, 0.6);
      z-index: 100;
      .address-section {
        position: absolute;
        left: 0;
        bottom: 0;
        background-color: white;
        height: 900rpx;
        width: 100%;
        overflow: auto;
        .title-list {
          position: absolute;
          top: 0;
          left: 0;
          height: 80rpx;
          width: 100%;
          padding: 0 25rpx;
          border-bottom: 1px solid $xg-c-seg;
          background-color: #fff;
          view {
            display: inline-block;
            margin-right: 20rpx;
            height: 80rpx;
            line-height: 80rpx;
            &.selectedTitle {
              color: $xg-c-red;
              font-weight: blod;
              border-bottom: 2rpx solid $xg-c-red;
            }
          }
        }
        .item-list {
          margin-top: 80rpx;
          .wrapper {
            view {
              height: 80rpx;
              line-height: 80rpx;
              margin-left: 25rpx;
              width: 100%;
              &.selectedArea {
                color: $xg-c-red;
                font-weight: bold;
              }
            }
          }
        }
      }
    }
    .address-popup {
      position: fixed;
      left: 0;
      top: 0;
      width: 100%;
      height: 100vh;
      background-color: rgba(0, 0, 0, 0.6);
      .package-list {
        position: absolute;
        left: 0;
        bottom: 0;
        width: 100%;
        overflow: auto;
        background-color: #fff;
        padding-left: 30rpx;
        .package-item {
          height: 60rpx;
          line-height: 60rpx;
          &.active {
            color: $xg-c-red;
            font-weight: 500;
          }
        }
      }
    }
  }
</style>
<template>
  <view class="customer-page">
    <view class="page-content">
      <view class="goods-part">
        <view @tap="onClickGoods({{goods}})" class="content">
          <image src="{{goods.goodsImg}}" mode="widthFix">
          </image>
          <view class="goods-info">
            <text class="name">{{goods.name}}</text>
            <view class="dim">
              {{goods.saleValue}}
            </view>
            <text class="price">ï¿¥{{globalWxs.formatFenPrice(goods.nbPrice)}}</text>
          </view>
          <view class="num">
            <text>X {{goods.num}}</text>
          </view>
        </view>
      </view>
      <view class="customer-type">
        <text :class="{'active': customerExpect === 10}" @tap="onClickExpect(10)">éè´§</text>
        <text :class="{'active': customerExpect === 20}" @tap="onClickExpect(20)">æ¢è´§</text>
        <text :class="{'active': customerExpect === 30}" @tap="onClickExpect(30)">ç»´ä¿®</text>
      </view>
      <view class="details-part">
        <!--<div class="item">-->
        <!--<span>éè´§</span>-->
        <!--<span>éè´§åå </span>-->
        <!--</div>-->
        <view class="item">
          <text class="item-title">éè´§æ¹å¼</text>
          <text>ä¸é¨åä»¶</text>
        </view>
        <view class="item">
          <text class="item-title">åè£æè¿°</text>
          <text @tap="onClickPackage">{{packageTitle}}</text>
        </view>
        <view class="item">
          <text class="item-title">éæ¬¾éé¢</text>
          <text>ï¿¥{{globalWxs.formatFenPrice(total)}}</text>
        </view>
      </view>
      <view class="address-part">
        <view class="name section">
          <text class="item-title">èç³»äºº:</text>
          <input type="text"
                 placeholder="èç³»äººå§å"
                 value="{{customerContactName}}"/>
        </view>
        <view class="mobile section">
          <text class="item-title">èç³»æ¹å¼:</text>
          <input type="number"
                 placeholder="æ¶è´§äººææºå·"
                 maxlength="11"
                 value="{{customerMobilePhone}}"/>
        </view>
        <view class="address-city section" @tap="onClickAddress">
          <text class="item-title">åè´§å°åï¼</text>
          <text wx:if="{{province.areaId === 0}}" class="content placeholder">çä»½ åå¸ åºå¿</text>
          <text wx:else class="area">{{province.areaName}} {{city.areaName}} {{county.areaName}} {{town.areaName}}</text>
        </view>
        <view class="address-street pr2 section">
          <text class="item-title">è¯¦ç»å°åï¼</text>
          <textarea value="{{detailAddress}}"
                    auto-height
                    placeholder="è¯¦ç»å°å"></textarea>
        </view>
      </view>
      <view class="describe-part">
        <view class="remark-section">
          <text class="item-title">éè´§åå :</text>
          <textarea value="{{questionDesc}}"
                    auto-height
                    placeholder="éå¡«"
                    maxlength="1000"></textarea>
        </view>
        <view class="pic-section">
          <view class="new-file-input" @tap="onClickFile">
            <image src="./img/pic-icon.png" mode="widthFix">
            </image>
            <text>ä¸ä¼ å­è¯æå¤å­å¼ </text></view>
          <view class="img-box">
            <repeat for="{{imgList}}">
            <view class="img-wrapper">
              <image src="{{item}}" mode="widthFix">
              </image>
              <text @tap="onClickImgClose(index)">X</text>
            </view>
            </repeat>
          </view>
        </view>
      </view>
      <view class="footer-part">
        <view class="submit">
          <button @tap="onClickSubmit" :class="{'active': canSubmit}">æäº¤ç³è¯·</button>
        </view>
      </view>
    </view>
    <view wx:if="{{showAddress}}" class="popup" @tap="onCloseAddress">
      <view class="address-section" @tap.stop="onClickContent">
        <view class="title-list">
          <repeat for="{{titleList}}" item="title">
            <view :class="{'selectedTitle': showLevel === index}"
                  @tap="onClickTitle({{index}})">
              {{(longAddress[index].areaName !== '') ? longAddress[index].areaName : title}}
            </view>
          </repeat>
        </view>
        <view class="item-list">
          <view class="wrapper li" hidden="{{showLevel !== 0}}">
            <repeat for="{{provinces}}" item="i">
              <view
                :class="{selectedArea: i.areaName === province.areaName}"
                @tap="onClickProvince({{i}})">{{i.areaName}}</view>
            </repeat>
          </view>
          <view class="wrapper li" hidden="{{showLevel !== 1}}">
            <repeat for="{{cities}}" item="i">
              <view :class="{selectedArea: i.areaName === city.areaName}"
                    @tap="onClickCity({{i}})">{{i.areaName}}</view>
            </repeat>
          </view>
          <view class="wrapper li" hidden="{{showLevel !== 2}}">
            <repeat for="{{counties}}"
                    item="i">
              <view :class="{selectedArea: i.areaName === county.areaName}"
                    @tap="onClickCounty({{i}})">{{i.areaName}}</view>
            </repeat>
          </view>
          <view class="wrapper li" hidden="{{showLevel !== 3}}">
            <repeat for="{{towns}}"
                    item="i">
              <view :class="{selectedArea: i.areaName === town.areaName}"
                    @tap="onClickTown({{i}})">{{i.areaName}}</view>
            </repeat>
          </view>
        </view>
      </view>
    </view>
    <view wx:if="{{showPackage}}" class="address-popup">
      <view class="package-list">
        <repeat for="{{packageList}}">
          <view class="package-item"
                :class="{active: packageDesc === item.id}"
                @tap="onClickPackageItem({{item}})">
            {{item.name}}
          </view>
        </repeat>
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect, getStore } from 'wepy-redux' // eslint-disable-line
  import StringTool from '../../tool/StringTool';
  import globalWxs from '../../wxs/global.wxs'
  import NetworkManagerMine from '@/network/NetworkManagerMine'
  import NetworkManagerCustomer from '@/network/NetworkManagerCustomer'
  import { MALL_BASE_URL } from '@/network/NetworkManager';

  @connect({
    isLogin(state) {
      return state.user.hasAuthor;
    },
    userInfo(state) {
      return state.user.userInfo;
    }
  })

  export default class Customer extends wepy.page {
    config = {
      navigationBarTitleText: 'ç³è¯·å®å'
    };
    wxs = {
      globalWxs
    }

    components = {}

    data = {
      customerExpect: 10, // å®¢æ·é¢æï¼éè´§(10)ãæ¢è´§(20)ãç»´ä¿®(30)
      questionDesc: '', // äº§åé®é¢æè¿°ï¼æå¤1000å­ç¬¦ï¼
      isNeedDetectionReport: false, // æ¯å¦éè¦æ£æµæ¥å
      isHasPackage: false, // æ¯å¦æåè£
      packageDesc: 0, // åè£æè¿°
      customerContactName: '',
      customerMobilePhone: '',
      customerEmail: '',
      customerPostcode: '',
      showAddress: false,
      pickwareType: 4, // åä»¶æ¹å¼ï¼ä¸é¨åä»¶ï¼4ï¼
      province: {
        areaName: '',
        areaId: 0
      },
      city: {
        areaName: '',
        areaId: 0
      },
      county: {
        areaName: '',
        areaId: 0
      },
      town: {
        areaName: '',
        areaId: 0
      },
      detailAddress: '',
      files: [],
      imgList: [],
      showLevel: 0,
      provinces: [],
      cities: [],
      counties: [],
      towns: [],
      titleList: [
        'çä»½',
        'åå¸',
        'ä¹¡é'
      ],
      packageList: [
        {name: 'æ åè£', id: 0},
        {name: 'åè£å®æ´', id: 10},
        {name: 'åè£ç ´æ', id: 20}
      ],
      showPackage: false,
      packageTitle: 'è¯·éæ©',
      selectedPackage: false,
      orderInfo: {},
      defaultAddress: {},
      goods: {}
    }

    computed = {
      total() {
        let goods = this.goods;
        return goods.nbPrice * goods.num;
      },
      longAddress() {
        return [this.province, this.city, this.county, this.town]
      },
      skuId() {
        return this.goods.skuId
      },
      skuNum() {
        return this.goods.num;
      },
      orderId() {
        return this.orderInfo.orderId;
      },
      customerTel() {
        return this.customerMobilePhone;
      },
      questionPic() {
        // é®é¢æè¿°å¾ç
        return this.imgList.join(',')
      },
      canSubmit() {
        if (!this.selectedPackage) {
          return false
        }
        if (this.customerContactName === '') {
          return false
        }
        if (!StringTool.isMobile(this.customerMobilePhone)) {
          return false
        }
        if (this.county.areaId === 0 || (this.towns.length !== 0 && this.town.areaId === 0)) {
          return false
        }
        if (this.detailAddress === '') {
          return false
        }
        return true;
      }
    }

    methods = {
      onClickExpect(type) {
        this.customerExpect = Number(type);
        this.$apply();
      },
      onClickPackage() {
        this.showPackage = true;
      },
      onClickPackageItem(item) {
        this.packageDesc = item.id;
        this.packageTitle = item.name;
        this.selectedPackage = true;
        this.showPackage = false;
        this.$apply();
      },
      onClickAddress() {
        this.showAddress = true;
        this.$apply();
      },
      onClickTitle(index) {
        this.showLevel = index;
        this.$apply();
      },
      onClickContent() {
        console.log('nothing')
      },
      onCloseAddress() {
        console.log('close')
        this.showAddress = false;
        this.$apply();
      },
      onClickProvince(item) {
        NetworkManagerMine.fetchCities({provinceId: item.areaId})
          .then(list => {
//            document.querySelector('.address-section').scrollTop = 0;
            this.showLevel = 1;
            this.province = item;
            this.cities = list;
            this.city = {
              areaName: '',
              areaId: 0
            };
            this.counties = [];
            this.county = {
              areaName: '',
              areaId: 0
            };
          }, err => {
            console.log(err)
          })
      },
      onClickCity(item) {
        NetworkManagerMine.fetchCounties({cityId: item.areaId})
          .then(list => {
//            document.querySelector('.address-section').scrollTop = 0;
            this.showLevel = 2;
            this.city = item;
            this.counties = list;
            this.county = {
              areaName: '',
              areaId: 0
            };
            this.$apply();
          }, err => {
            console.log(err)
          })
      },
      onClickCounty(item) {
//        document.querySelector('.address-section').scrollTop = 0;
        this.county = item;
        NetworkManagerMine.fetchTowns({countyId: item.areaId})
          .then(list => {
            if (list.length !== 0) {
              this.titleList.push('åºå');
              this.showLevel = 3;
              this.towns = list;
              this.town = {
                areaName: '',
                areaId: 0
              }
            } else {
              this.showLevel = 2;
              this.towns = list;
              this.town = {
                areaName: '',
                areaId: 0
              }
              this.titleList = this.titleList.slice(0, 3);
              this.showAddress = false;
            }
            this.$apply();
//              document.querySelector('.address-section').scrollTop = 0;
          }, err => {
            console.log(err)
          })
      },
      onClickTown(item) {
//        document.querySelector('.address-section').scrollTop = 0;
        this.town = item;
        this.showAddress = false;
        this.$apply();
      },
      onClickFile() {
        if (this.imgList.length === 6) {
          wepy.showToast({title: 'æå¤ä¸ä¼ 6å¼ å¾ç', icon: 'none'})
          return
        }
        let files;
        let params = {
          'orderId': this.orderId,
          'skuId': this.skuId
        }
        wepy.chooseImage({
          count: 6,
          success: (res) => {
            files = res.tempFilePaths;
            wepy.showNavigationBarLoading();
            let successUp = 0; // æåä¸ªæ°
            let failUp = 0; // å¤±è´¥ä¸ªæ°
            let i = 0; //ç¬¬å ä¸ª
            this.uploadFiles(files, successUp, failUp, i);
          }
        })
      },
      onClickImgClose(index) {
        this.imgList.splice(index, 1);
      },
      onClickSubmit() {
        if (!this.canSubmit) {
          return
        }
        let params = {
          orderId: this.orderId,
          skuId: this.skuId,
          skuNum: this.skuNum,
          customerExpect: this.customerExpect,
          questionDesc: this.questionDesc,
          isNeedDetectionReport: this.isNeedDetectionReport, // ???
          questionPic: this.questionPic,
          isHasPackage: this.isHasPackage, // ???
          packageDesc: this.packageDesc, // ???
          customerContactName: this.customerContactName,
          customerTel: this.customerTel, // ???
          customerMobilePhone: this.customerMobilePhone,
          customerEmail: this.customerEmail, // ???
          customerPostcode: this.customerPostcode, // ???
          pickwareType: this.pickwareType,
          pickwareProvince: this.province.areaId,
          pickwareCity: this.city.areaId,
          pickwareCounty: this.county.areaId,
          pickwareVillage: this.town.areaId,
          pickwareAddress: this.detailAddress,
          returnwareType: this.pickwareType,
          returnwareProvince: this.province.areaId,
          returnwareCity: this.city.areaId,
          returnwareCounty: this.county.areaId,
          returnwareVillage: this.town.areaId,
          returnwareAddress: this.detailAddress
        }
        wepy.showNavigationBarLoading();
      NetworkManagerCustomer.createAfsApply(params).then(data => {
        wepy.hideNavigationBarLoading();
        if (data) {
          wepy.showToast({title: 'ç³è¯·æå', icon: 'none'})
          setTimeout(() => {
            wepy.navigateBack()
          }, 1500)
        } else {
          wepy.showToast({title: 'ç³è¯·å¤±è´¥', icon: 'none'})
        }
      }, err => {
        wepy.hideNavigationBarLoading();
        wepy.showToast({title: err.message, icon: 'none'})
      })
      }
    };

    onLoad(options) {
      this.orderInfo = JSON.parse(options.order);
      this.defaultAddress = JSON.parse(options.address);
      this.goods = JSON.parse(options.goods);
      this.customerMobilePhone = this.defaultAddress.mobile;
      this.customerContactName = this.defaultAddress.name;
      this.detailAddress = this.defaultAddress.detailAddress;
      this.province = {
        areaName: this.defaultAddress.provinceName,
        areaId: this.defaultAddress.province
      };
      this.city = {
        areaName: this.defaultAddress.cityName,
        areaId: this.defaultAddress.city
      };
      this.county = {
        areaName: this.defaultAddress.countyName,
        areaId: this.defaultAddress.county
      };
      this.town = {
        areaName: this.defaultAddress.townName,
        areaId: this.defaultAddress.town
      };
      NetworkManagerMine.fetchProvince()
        .then(list => {
          this.provinces = list.sort(function (a, b) {
            return a.areaId - b.areaId
          });
//          å¦ææ¯ç¼è¾çæåµ
            let addressInfo = this.defaultAddress;
            this.province = list.find(item => {
              return item.areaId === addressInfo.province;
            })
            this.$apply();
            NetworkManagerMine.fetchCities({provinceId: addressInfo.province})
              .then(list => {
                this.cities = list.sort(function (a, b) {
                  return a.areaId - b.areaId
                });
                this.city = list.find(item => {
                  return item.areaId === addressInfo.city;
                })
                this.$apply();
              }, err => {
                wepy.showToast({title: err.message, icon: 'none'})
              })

            NetworkManagerMine.fetchCounties({cityId: addressInfo.city})
              .then(list => {
                this.showLevel = 2;
                this.counties = list.sort(function (a, b) {
                  return a.areaId - b.areaId
                });
                this.county = list.find(item => {
                  return item.areaId === addressInfo.county;
                })
                this.$apply();
              }, err => {
                wepy.showToast({title: err.message, icon: 'none'})
              })
            if (addressInfo.town !== 0) {
              NetworkManagerMine.fetchTowns({countyId: addressInfo.county})
                .then(list => {
                  this.showLevel = 3;
                  this.titleList.push('åºå');
                  this.towns = list.sort(function (a, b) {
                    return a.areaId - b.areaId
                  });
                  this.town = list.find(item => {
                    return item.areaId === addressInfo.town;
                  })
                  this.$apply();
                }, err => {
                  wepy.showToast({title: err.message, icon: 'none'})
                })
            }
        }, err => {
          console.log(err)
        })
      this.$apply();
    }

    onShow() {}

    uploadFiles(files, successUp, failUp, i) {
        let store = getStore();
        wepy.uploadFile({
          url: MALL_BASE_URL + '/after/uploadFiles',
          filePath: files[i],
          name: 'files',
          header: {
            'Authorization': store.getState().user.token,
            'Content-Type': 'multipart/form-data'
          },
          formData: {
            'orderId': this.orderId,
            'skuId': this.skuId
          },
          success: (res) => {
            wepy.hideNavigationBarLoading();
            let data = JSON.parse(res.data);
            if (!data.errorCode) {
              successUp++;
              this.imgList = [...this.imgList, ...data.data];
              this.$apply();
            } else {
                wepy.showToast({title: 'ä¸ä¼ å¤±è´¥', icon: 'none'})
            }
          },
          fail: (err) => {
            wepy.hideNavigationBarLoading();
            failUp++;
            wepy.showToast({title: 'ä¸ä¼ å¤±è´¥', icon: 'none'})
          },
          complete: () => {
            wepy.hideNavigationBarLoading();
            i++;
            if (i === files.length) {
              console.log('æ§è¡å®æ¯');
              console.log('æåï¼' + successUp + ' å¤±è´¥ï¼' + failUp);
            } else {
              this.uploadFiles(files, successUp, failUp, i)
            }
          }
        })
    }
  }
</script>
