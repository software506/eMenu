<style lang="scss" rel="stylesheet/scss">
  @import '../../assets/scss/index.scss';

  .orders-titles {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 80rpx;
    color: #999;
    background-color: #fff;
    border-bottom: 1rpx solid $xg-c-seg;
    z-index: 10;
    @include flex-x-middle();
    view {
      font-size: $xg-size-3;
      float: left;
      width: 25%;
      text-align: center;
      height: 100%;
      line-height: 80rpx;
      background: #fff;
      &.selected {
        color: $xg-c-red;
        border-bottom: 2px solid $xg-c-red;
      }
    }
  }

  .orders-area {
    padding-top: 80rpx;
    height: 100vh;
    .order-item:first-of-type {
      margin-top: 20rpx;
    }
  }
</style>
<template>
  <view class="orders-titles">
    <repeat for="{{typeList}}" item="i">
      <view :class="{selected: type === i.type}"
            @tap="onClickType({{i.type}})">{{i.name}}
      </view>
    </repeat>
  </view>
  <scroll-view class="orders-area"
               scroll-y="true"
               bindscrolltolower="loadMore"
               lower-threshold="150"
               scroll-top="{{scrollTop}}">
    <repeat for="{{orderList}}" item="order">
      <order-cell :order="order"
                  @clickCancel.user="onClickCancel"
                  @clickPay.user="onClickPay"
                  @clickOrder.user="onClickOrder"></order-cell>
    </repeat>
  </scroll-view>
</template>

<script>
  import wepy from 'wepy'
  import {connect} from 'wepy-redux' // eslint-disable-line
  import NetworkManagerOrder from '../../network/NetworkManagerOrder';
  import NetworkManagerPayment from '../../network/NetworkManagerPayment'
  import OrderCell from '@/components/widget/order-cell';

  @connect({
    userInfo (state) {
      return state.user.userInfo
    }
  })
  export default class OrderList extends wepy.page {
    config = {
      navigationBarTitleText: '我的订单'
    }

    components = {
      'order-cell': OrderCell
    }

    data = {
      typeList: [
        {
          name: '全部',
          type: 'all'
        },
        {
          name: '待付款',
          type: 'unpay'
        },
        {
          name: '待收货',
          type: 'wait'
        },
        {
          name: '已完成',
          type: 'finish'
        }
      ],
      page: 1,
      type: 'all',
      orderList: [],
      loading: true,
      noMore: false
    }

    computed = {}

    methods = {
      loadMore() {
        if (this.noMore) {
          return
        }
        this.page = this.page + 1;
        wepy.showNavigationBarLoading();
        NetworkManagerOrder.fetchOrders(this.page, this.type)
          .then((data) => {
            if (data.orders.length === 0) {
              this.noMore = true;
              this.$apply();
              return
            }
            this.orderList = this.orderList.concat(data.orders);
            this.$apply();
            wepy.hideNavigationBarLoading();
          }, err => {
            wepy.showToast({title: err.message, icon: 'none'})
            wepy.hideNavigationBarLoading();
          }).catch(error => {
          console.log(error);
          wepy.hideNavigationBarLoading();
        })
      },
      onClickType(type) {
        this.type = type;
        this.page = 1;
        this.orderList = [];
        this.noMore = false;
        this.$apply();
        this.fetchOrders();
      },
      onClickOrder(order) {
        wepy.navigateTo({
          url: './order-detail?order=' + JSON.stringify(order)
        })
      },
      onClickCancel(order) {
        wepy.showNavigationBarLoading();
        NetworkManagerOrder.cancelOrder(order.order.orderId)
          .then(data => {
            wepy.hideNavigationBarLoading();
            this.fetchOrders();
          }, err => {
            wepy.showToast({title: err.message, icon: 'none'})
            wepy.hideNavigationBarLoading();
          })
      },
      onClickPay(order) {
          console.log(order);
        wepy.showNavigationBarLoading();
        NetworkManagerPayment.applyPay(order.order.orderId, 'wxmini')
          .then(data => {
            wepy.hideNavigationBarLoading();
            wepy.requestPayment({
              'timeStamp': data.timeStamp,
              'nonceStr': data.nonceStr,
              'package': data.packages,
              'paySign': data.paySign,
              'signType': 'MD5',
//            'signType': data.signType,
              'success': (res) => {
                console.log(res);
                this.fetchOrders();
              },
              'fail': (res) => {
                console.log(res);
                this.fetchOrders();
              }
            })
          }, err => {
            wepy.hideNavigationBarLoading();
            wepy.showToast({title: err.message, icon: 'none'})
          })
      }
    }

    onShow() {
      this.page = 1;
      this.$apply();
      this.fetchOrders();
    }

    fetchOrders() {
      wepy.showNavigationBarLoading();
      NetworkManagerOrder.fetchOrders(this.page, this.type)
        .then((data) => {
          this.orderList = data.orders;
          this.$apply();
          wepy.hideNavigationBarLoading();
        }, err => {
          wepy.showToast({title: err.message, icon: 'none'})
          wepy.hideNavigationBarLoading();
        }).catch(error => {
        console.log(error);
        wepy.hideNavigationBarLoading();
      })
    }
  }
</script>
